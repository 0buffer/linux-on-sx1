// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "phone.h"

extern "C" {
#include <flphone_config.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/select.h>
//#include <nano-X.h>
#include <flphone/debug.h>
//#include <theme.h>
#include <ipc/shareddata.h>
#include <ipc/tbus.h>

#include "phone_tbus.h"
#include "gsm.h"

#include <libgsmd/libgsmd.h>
#include <libgsmd/voicecall.h>
}

void UserInterface::cb_dial_num_i(Fl_Input*, void*) {
  // check value to fit to phone number
// 0..9 , + , p , w
// when the number is longer than 13 digits change
// the font to smaller;
}
void UserInterface::cb_dial_num(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_dial_num_i(o,v);
}

void UserInterface::cb_btn_dial_i(Fl_Button*, void*) {
  // start a phone call
// animate when ringing
// activate Call tab when connected;
	// Dial a number
	struct lgsm_addr addr;
	addr.type = (lgsm_addr_type)129;
	strncpy(addr.addr, dial_num->value(), sizeof(addr.addr)-1);
	addr.addr[sizeof(addr.addr)-1] = '\0';
	lgsm_voice_out_init(lgsmh, &addr);

}
void UserInterface::cb_btn_dial(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_btn_dial_i(o,v);
}

void UserInterface::cb_btn_answer_i(Fl_Button*, void*) {
  // answer the call;
}
void UserInterface::cb_btn_answer(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_btn_answer_i(o,v);
}

void UserInterface::cb_btn_end_call_i(Fl_Button*, void*) {
  // end call;
}
void UserInterface::cb_btn_end_call(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_btn_end_call_i(o,v);
}

void UserInterface::cb_history_i(Fl_Browser*, void*) {
  // dial selected number;
}
void UserInterface::cb_history(Fl_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_history_i(o,v);
}

void UserInterface::cb_Dial_i(Fl_Menu_*, void*) {
  // dial a number;
}
void UserInterface::cb_Dial(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Dial_i(o,v);
}

void UserInterface::cb_Copy_i(Fl_Menu_*, void*) {
  // copy to clipboard;
}
void UserInterface::cb_Copy(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Copy_i(o,v);
}

Fl_Menu_Item UserInterface::menu_LeftSoft[] = {
 {"Dial", 0,  (Fl_Callback*)UserInterface::cb_Dial, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Copy", 0,  (Fl_Callback*)UserInterface::cb_Copy, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Speaker", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"End this call", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Hold", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Disable mic", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"New call", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Send DTMF", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_RightSoft_i(Fl_Menu_Button*, void*) {
  // Close program;
}
void UserInterface::cb_RightSoft(Fl_Menu_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_RightSoft_i(o,v);
}

Fl_Double_Window* UserInterface::make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = win_phone = new Fl_Double_Window(176, 200, "Phone");
    w = o;
    o->user_data((void*)(this));
    { Fl_Tabs* o = maintab = new Fl_Tabs(0, 0, 177, 180);
      { Fl_Group* o = grp_dial = new Fl_Group(0, 20, 177, 160, "Dial");
        { Fl_Input* o = dial_num = new Fl_Input(1, 101, 176, 34);
          o->box(FL_FLAT_BOX);
          o->textsize(18);
          o->callback((Fl_Callback*)cb_dial_num);
          o->when(FL_WHEN_CHANGED);
        }
        { Fl_Button* o = btn_dial = new Fl_Button(10, 145, 157, 25, "Call  @->");
          o->shortcut(0xffc0);
          o->callback((Fl_Callback*)cb_btn_dial);
        }
        o->end();
      }
      { Fl_Group* o = grp_call = new Fl_Group(0, 20, 176, 160, "Call");
        o->hide();
        { Fl_Text_Display* o = hint = new Fl_Text_Display(10, 30, 157, 25);
          o->deactivate();
        }
        { Fl_Text_Display* o = contact_name = new Fl_Text_Display(10, 54, 157, 25);
          o->labeltype(FL_NO_LABEL);
          o->deactivate();
        }
        { Fl_Text_Display* o = phone_number = new Fl_Text_Display(10, 78, 157, 25);
          o->deactivate();
        }
        { Fl_Button* o = btn_answer = new Fl_Button(10, 145, 60, 25, "Answer");
          o->shortcut(0xffc0);
          o->callback((Fl_Callback*)cb_btn_answer);
        }
        { Fl_Button* o = btn_end_call = new Fl_Button(105, 145, 60, 25, "End");
          o->shortcut(0xffc1);
          o->callback((Fl_Callback*)cb_btn_end_call);
        }
        o->end();
      }
      { Fl_Group* o = grp_history = new Fl_Group(4, 22, 169, 151, "History");
        o->hide();
        { Fl_Browser* o = history = new Fl_Browser(5, 25, 168, 148);
          o->callback((Fl_Callback*)cb_history);
          o->when(FL_WHEN_ENTER_KEY_ALWAYS);
        }
        o->end();
      }
      o->end();
    }
    { Fl_Menu_Button* o = LeftSoft = new Fl_Menu_Button(0, 180, 88, 20, "Options");
      o->menu(menu_LeftSoft);
    }
    { Fl_Menu_Button* o = RightSoft = new Fl_Menu_Button(88, 180, 88, 20, "Close");
      o->callback((Fl_Callback*)cb_RightSoft);
      o->when(FL_WHEN_ENTER_KEY_ALWAYS);
    }
    o->end();
  }
  return w;
}

int main(int argc, char **argv) {

	int fd_ipc;
	int fd_lgsm;
	UserInterface ui;

	fd_ipc = tbus_register_service("Phone");
	fd_lgsm = init_lgsm();

	if(fd_ipc >= 0) {
		// add fd of IPC messages
		Fl::add_fd(fd_ipc, tbus_handle);
	}
	if(fd_lgsm >= 0) {
		// add fd of libgsm
		Fl::add_fd(fd_lgsm, lgsm_handle);
	} else {
		ui.dial_num -> value("no gsmd connection!");
		ui.maintab->value(ui.grp_dial);
	}
	// UI construction
	ui.make_window();
	ui.win_phone->show(argc, argv);

	return Fl::run();
}
