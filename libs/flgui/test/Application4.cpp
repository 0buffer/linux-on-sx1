// generated by Fast Light User Interface Designer (fluid) version 1.0108

//#include <libintl.h>
#include "Application4.h"

#include <stdio.h>

void cb_Open(Fl_Menu_ * o, void *v)
{
	// Open cb
	printf("cb_Open\n");
	o->label("Close");
}

void cb_Move(Fl_Menu_ * o, void *v)
{
	// Move cb
	printf("cb_Move\n");
	o->label("Moved");
}

// declaration of the menu
static Fl_Menu_Item menu_LeftSoft[] = {
	{"Open", 0, (Fl_Callback *) cb_Open, 0, 0, FL_NORMAL_LABEL, 0,
	 14, 0},
	{"Move", 0, (Fl_Callback *) cb_Move, 0, 0, FL_NORMAL_LABEL, 0,
	 14, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0}
};

// callback for the Right softkey
void cb_RightSoft(Fl_Menu_Button * o, void *v)
{
	// print the index of the
	printf("cb_RightSoft\n");
	o->label("test2");
}

//---------------------------------------------------------------------
AppView::AppView(int X, int Y, int W, int H, const char *L)
:Fl_Group(X, Y, W, H, L)
{
// widget constructor
	AppArea = new Fl_Scroll(0, 0, 176, 180);
	AppArea->end();
	// Fl_Scroll* AppArea
	LeftSoft = new Fl_Menu_Button(0, 180, 88, 20, "Options");
	// Fl_Menu_Button* LeftSoft
	RightSoft = new Fl_Button(88, 180, 88, 20, "Close");
	// Fl_Menu_Button* RightSoft
	end();
}

//---------------------------------------------------------------------
Fl_Grid::Fl_Grid(int x, int y, int w, int h, const char *label)
:  Fl_Scroll(x, y, w, h, label)
{
	_cols = 3;
	_hspace = (APPVIEW_WIDTH - GRID_ICON_WIDTH * 3 ) / (3 + 1);
	_vspace = (APPVIEW_AREA_HEIGHT - GRID_ICON_HEIGHT * 4 ) / (4 + 1);

	type(Fl_Scroll::VERTICAL);
}

void Fl_Grid::add_item(Fl_Widget *w)
{
	// horizontal spacing between items in the grid
//	_hspace = (w()  - w->w() * _cols) / (_cols + 1);
	int childs = children() - 2; // minus scrollbars
	printf("children=%d\n",childs);
	int newx = _hspace + ((childs) % 3) * ( GRID_ICON_WIDTH + _hspace);
	int newy = _vspace + ((childs) / 3) * ( GRID_ICON_HEIGHT + _vspace);

	add(w);
	w->position(newx, newy);
}

void Fl_Grid::remove_item(Fl_Widget *w)
{
	remove(w);
}

//---------------------------------------------------------------------

// main
Fl_Double_Window *AppWindow = (Fl_Double_Window *) 0;

AppView *appview = (AppView *) 0;
Fl_Grid *grid = (Fl_Grid *) 0;

Fl_Button *btn1 = (Fl_Button *) 0;
Fl_Button *btn2 = (Fl_Button *) 0;

static void cb_btn1(Fl_Button * o, void *)
{
	o->label("turn");
}

int main(int argc, char **argv)
{
	// Create application window
	{
		AppWindow = new Fl_Double_Window(0,20,176, 200);
		// Create application view
		{
			appview = new AppView(0, 0);
			// add left softkey menu
			appview->LeftSoft->menu(menu_LeftSoft);

			// add right softkey menu (another way to do this)
			appview->RightSoft->
			    callback((Fl_Callback *) cb_RightSoft);

			{
				btn1 =
				    new Fl_Button(25, 25, 48, 35,
						  "Test");
				btn1->callback((Fl_Callback *) cb_btn1);
			}	// Fl_Button* btn1
			{
				btn2 =
				    new Fl_Button(25, 250, 48, 35,
						  "Test");
			}	// Fl_Button* btn2

//			appview->AppArea->add(btn1);
//			appview->AppArea->add(btn2);
			grid = new Fl_Grid(0, 0);
			grid -> add_item(btn1);
			grid -> add_item(btn2);
			appview->AppArea->add(grid);

		}		// AppView* appview
		AppWindow->size_range(176, 200, 176, 200);
		AppWindow->end();
	}			// Fl_Double_Window* AppWindow
	AppWindow->show(argc, argv);
	return Fl::run();
}
